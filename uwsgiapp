#! /usr/bin/env python
#
# uwsgiapp
#
# Convenience utility for stopping & starting apps controlled by uwsgi emperor mode.
# NOTE: this assumes they are arranged as an apps-enabled directory with symlinks to
# an apps-available directory.
#
# Quentin Stafford-Fraser, Telemarq Ltd, 2014

import argparse
import sys
import os
import glob

APPS_AVAILABLE_DIR='/etc/uwsgi/apps-available'
APPS_ENABLED_DIR='/etc/uwsgi/apps-enabled'

def app_list(dir):
    apps = [os.path.splitext(os.path.basename(f))[0] for f in glob.glob("{p}/*.ini".format(p=dir))]
    return apps

def full_app_list():
    """ Return all apps, whether or not enabled """
    return set(app_list(APPS_AVAILABLE_DIR)) | set(app_list(APPS_ENABLED_DIR))

def app_enabled_inifile(app):
    return "{p}/{a}.ini".format(p=APPS_ENABLED_DIR, a=app)

def app_available_inifile(app):
    return "{p}/{a}.ini".format(p=APPS_AVAILABLE_DIR, a=app)

def check_app(app):
    apps = full_app_list()
    if app not in apps:
        print >>sys.stderr, "'{a}' is not a valid app name - can't find a .ini file".format(a=app)
        print >>sys.stderr, "Valid apps are: " + u", ".join(apps)
        sys.exit(1)

def start_app(args):
    """ Create symlink for app"""

    app = args.app
    check_app(app)

    # We don't overwrite existing configs
    en_ini = app_enabled_inifile(app)
    if os.path.exists(en_ini):
        print >>sys.stderr, "Already running."
        print >>sys.stderr, "(An ini file already exists at {i})".format(i=en_ini)
        sys.exit(1)

    # This test shouldn't be needed because we check the app name first
    # but just in case.
    av_ini = app_available_inifile(app)
    if not os.path.exists(av_ini):
        print >>sys.stderr, "App not available."
        print >>sys.stderr, "(No ini file found at {i})".format(i=av_ini)
        sys.exit(1)

    # Now make the link
    os.symlink(av_ini, en_ini)


def stop_app(args):
    """ Remove symlink for app"""
    app = args.app
    check_app(app)

    en_ini = app_enabled_inifile(app)
    if not os.path.exists(en_ini):
        print >>sys.stderr, "Not running."
        print >>sys.stderr, "(No ini file found at {i})".format(i=en_ini)        
        sys.exit(1)

    # Remove the link
    os.remove(en_ini)


def restart_app(args):
    """ Touch symlink for app"""
    app=args.app
    check_app(app)

    en_ini = app_enabled_inifile(app)
    if not os.path.exists(en_ini):
        print >>sys.stderr, "That app does not appear to be enabled"
        sys.exit(1)

    # Touch the file
    os.utime(en_ini, None)

def list_apps(args):
    """ List apps"""
    for a in full_app_list():
        print a

def main():

    # First, check if we can do anything useful

    if not os.path.exists(APPS_AVAILABLE_DIR):
        print >>sys.stderr, "To use this utility, directories {a} and {b} must both exist.".format(
            a=APPS_AVAILABLE_DIR, b=APPS_ENABLED_DIR)
        sys.exit(3)

    # Then read the arguments

    parser = argparse.ArgumentParser()
    subparsers = parser.add_subparsers(title='commands', help='run with -h for syntax')

    parser_start=subparsers.add_parser("start", help='start an app')
    parser_start.add_argument("app", help='name of app')
    parser_start.set_defaults(func=start_app)

    parser_stop=subparsers.add_parser("stop", help='stop an app')
    parser_stop.add_argument("app", help='name of app')
    parser_stop.set_defaults(func=start_app)

    parser_restart=subparsers.add_parser("restart", help='restart an app')
    parser_restart.add_argument("app", help='name of app')
    parser_restart.set_defaults(func=restart_app)

    parser_list=subparsers.add_parser("list", help='list available apps')
    parser_list.set_defaults(func=list_apps)
    
    try:
        args = parser.parse_args()
        args.func(args)
    
    except OSError, e:
        if e.errno == 13:
            print >>sys.stderr, "Failed - do you have sufficient permissions?"
            sys.exit(2)
        raise

if __name__ == '__main__':
    main()
